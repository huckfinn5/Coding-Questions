'''conducts a breath first seach to determine the total number of connected squares in a matrix'''

matrix = [[2,1,1,1,1],
          [2,3,1,2,3],
          [1,1,1,1,1],
          [2,3,1,3,2],
          [2,1,1,1,3]]

answer = [[0,0,0,0,0],
          [0,0,0,0,0],
          [0,0,0,0,0],
          [0,0,0,0,0],
          [0,0,0,0,0]]

def total_connected(matrix, answer):
    queue = Queue()
    greatest = 0
    for rows in range(0,len(matrix)):
        for cols in range(0,len(matrix[0])):
            if answer[rows][cols] != 1:
                queue.enqueue((rows, cols))
                counter = 0
                while queue.check_empty() == False:
                    temp = queue.dequeue()
                    counter +=1
                    value = matrix[temp[0]][temp[1]]
                    answer[temp[0]][temp[1]] = 1
                    if temp[0] ==len(matrix)-1 and temp[1] == len(matrix)-1:
                        pass
                    elif temp[0] == 0 and temp[1] == len(matrix)-1:
                        if value == matrix[temp[0]+1][temp[1]] and answer[temp[0]+1][temp[1]] == 0:
                            queue.enqueue((temp[0]+1,temp[1]))
                            answer[temp[0]+1][temp[1]] = 1
                        if value == matrix[temp[0]][temp[1]-1] and answer[temp[0]][temp[1]-1] == 0:
                            queue.enqueue((temp[0], temp[1]-1))
                            answer[temp[0]][temp[1]-1] = 1
                    elif temp[0] == len(matrix)-1 and temp[1] ==0:
                        if value == matrix[temp[0]-1][temp[1]] and answer[temp[0]-1][temp[1]] == 0:
                            queue.enqueue((temp[0]-1,temp[1]))
                            answer[temp[0]-1][temp[1]] = 1
                        if value == matrix[temp[0]][temp[1]+1] and answer[temp[0]][temp[1]+1] == 0:
                            queue.enqueue((temp[0], temp[1]+1))
                            answer[temp[0]][temp[1]+1] = 1
                    elif temp[0] == 0 and temp[1] ==0:
                        if value == matrix[temp[0]+1][temp[1]] and answer[temp[0]+1][temp[1]] == 0:
                            queue.enqueue((temp[0]+1,temp[1]))
                            answer[temp[0]+1][temp[1]] = 1
                        if value == matrix[temp[0]][temp[1]+1] and answer[temp[0]][temp[1]+1] == 0:
                            queue.enqueue((temp[0], temp[1]+1))
                            answer[temp[0]][temp[1]+1] = 1
                    elif temp[0] == len(matrix)-1:
                        if value == matrix[temp[0]-1][temp[1]] and answer[temp[0]-1][temp[1]] == 0:
                            queue.enqueue((temp[0]-1,temp[1]))
                            answer[temp[0]-1][temp[1]] = 1
                        if value == matrix[temp[0]][temp[1]+1] and answer[temp[0]][temp[1]+1] == 0:
                            queue.enqueue((temp[0], temp[1]+1))
                            answer[temp[0]][temp[1]+1] = 1
                        if value == matrix[temp[0]][temp[1]-1] and answer[temp[0]][temp[1]-1] == 0:
                            queue.enqueue((temp[0], temp[1]-1))
                            answer[temp[0]][temp[1]-1] = 1
                    elif temp[0] ==0:
                        if value == matrix[temp[0]+1][temp[1]] and answer[temp[0]+1][temp[1]] == 0:
                            queue.enqueue((temp[0]+1,temp[1]))
                            answer[temp[0]+1][temp[1]] = 1
                        if value == matrix[temp[0]][temp[1]+1] and answer[temp[0]][temp[1]+1] == 0:
                            queue.enqueue((temp[0], temp[1]+1))
                            answer[temp[0]][temp[1]+1] = 1
                        if value == matrix[temp[0]][temp[1]-1] and answer[temp[0]][temp[1]-1] == 0:
                            queue.enqueue((temp[0], temp[1]-1))
                            answer[temp[0]][temp[1]-1] = 1
                    elif temp[1] ==0:
                        if value == matrix[temp[0]+1][temp[1]] and answer[temp[0]+1][temp[1]] == 0:
                            queue.enqueue((temp[0]+1,temp[1]))
                            answer[temp[0]+1][temp[1]] = 1
                        if value == matrix[temp[0]-1][temp[1]] and answer[temp[0]-1][temp[1]] == 0:
                            queue.enqueue((temp[0]-1, temp[1]))
                            answer[temp[0]-1][temp[1]] = 1
                        if value == matrix[temp[0]][temp[1]+1] and answer[temp[0]][temp[1]+1] == 0:
                            queue.enqueue((temp[0], temp[1]+1))
                            answer[temp[0]][temp[1]+1] = 1
                    elif temp[1] ==len(matrix)-1:
                        if value == matrix[temp[0]+1][temp[1]] and answer[temp[0]+1][temp[1]] == 0:
                            queue.enqueue((temp[0]+1,temp[1]))
                            answer[temp[0]+1][temp[1]] = 1
                        if value == matrix[temp[0]-1][temp[1]] and answer[temp[0]-1][temp[1]] == 0:
                            queue.enqueue((temp[0]-1, temp[1]))
                            answer[temp[0]-1][temp[1]] = 1
                        if value == matrix[temp[0]][temp[1]-1] and answer[temp[0]][temp[1]-1] == 0:
                            queue.enqueue((temp[0], temp[1]-1))
                            answer[temp[0]][temp[1]-1] = 1
                    else:
                        if value == matrix[temp[0]+1][temp[1]] and answer[temp[0]+1][temp[1]] == 0:
                            queue.enqueue((temp[0]+1,temp[1]))
                            answer[temp[0]+1][temp[1]] = 1
                        if value == matrix[temp[0]-1][temp[1]] and answer[temp[0]-1][temp[1]] == 0:
                            queue.enqueue((temp[0]-1, temp[1]))
                            answer[temp[0]-1][temp[1]] = 1
                        if value == matrix[temp[0]][temp[1]-1] and answer[temp[0]][temp[1]-1] == 0:
                            queue.enqueue((temp[0], temp[1]-1))
                            answer[temp[0]][temp[1]-1] = 1
                        if value == matrix[temp[0]][temp[1]+1] and answer[temp[0]][temp[1]+1] == 0:
                            queue.enqueue((temp[0], temp[1]+1))
                            answer[temp[0]][temp[1]+1] = 1
                if counter > greatest:
                    greatest = counter
    return greatest
