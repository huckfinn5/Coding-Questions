/* finds the maximum number subsets that sum to a given number */

int number_subsets_sum(vector<int> alpha, vector<int> subset, int counter, int target, unordered_map<string, int> &master_dict1){
    for(int x = 0; x < subset.size(); x++){
        cout << subset[x] << " ";
    }
    cout << " the counter is " << counter << endl;
    int sum1 = 0;
    for(int x = 0; x < subset.size(); x++){
        sum1 += subset[x];
    };
    string var1 = to_string(sum1);
    string var2 = to_string(counter);
    string code = var1 + ":" + var2;
    if(master_dict1.find(code) != master_dict1.end()){
        cout << "yay" << endl;
        return master_dict1[code];
    }
    else if(sum1 == target){
        master_dict1[code] = 1;
        return 1;
    }
    else if (sum1 > target){
        master_dict1[code] = 0;
        return 0;
    }
    else if( counter < alpha.size()){
        vector<int> subset2;
        for(int x = 0; x < subset.size(); x++){
            subset2.push_back(subset[x]);
            cout << x << counter << endl;
        };
        subset2.push_back(alpha[counter]);
        int var1 = number_subsets_sum(alpha, subset, counter +1, target, master_dict1);
        int var2 = number_subsets_sum(alpha, subset2, counter +1, target, master_dict1);
        master_dict1[code] = var1 + var2;
        return var1 + var2;
    }
    else{
        return 0;
    };
    return 0;
};
